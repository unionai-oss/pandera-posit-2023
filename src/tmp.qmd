
## Pandera Crash Course

[▶️ Try Pandera](https://pandera.readthedocs.io/en/stable/lite/retro/notebooks/?path=try_pandera.ipynb)

## Pandera with R

Use `reticulate`!

```{r}
#| echo: true
library(reticulate)
library(dplyr)

use_condaenv("pandera-nyhackr")
```

## Validation packages in R

Excellent validation packages already exist in R 😎

- ✅ [`validate`](https://github.com/data-cleaning/validate)
- 🎯 [`pointblank`](https://github.com/rich-iannone/pointblank)

## Define a Pandera Schema

```{python}
#| echo: true
import numpy as np
import pandas as pd
import pandera as pa
from pandera.typing import Series


class Schema(pa.DataFrameModel):
    item: Series[str] = pa.Field(isin=["apple", "orange"], coerce=True)
    price: Series[float] = pa.Field(gt=0, coerce=True, nullable=True)


python_data = pd.DataFrame.from_records([
    {"item": "orange", "price": 0.75},
    {"item": "orange", "price": np.nan},
])
```

## Define some R data

```{r}
#| echo: true
r_data <- data.frame(
    item = c("apple", "orange", "orange"),
    price = c(0.5, 0.75, NaN)
)
```

## Validate Pandas DataFrames

```{r}
#| echo: true
# validate the python data
print(py$Schema$validate(py$python_data))
```

## Validate R DataFrames

It just works!

```{r}
#| echo: true
# validate an R dataframe
print(py$Schema$validate(r_data))
```

# What if the Data is Invalid?

## Define Some Invalid Data

```{r}
#| echo: true
invalid_data <- data.frame(
    item = c("apple", "orange", "orangee"),
    price = c(-1.0, 0.75, NaN)
)
```

## Catch the Python Exception

```{r}
#| echo: true
validated_data <- tryCatch({
    py$Schema$validate(invalid_data, lazy=TRUE)
}, error=function(err) {
    exception <<- attr(py_last_error(), "exception")
    return(NULL)
})
```

## Get the Failure Cases

```{r}
#| echo: true
# get failed rows don't forget the 0- to 1-based index conversion!
failure_cases <- exception$failure_cases
failed_rows <- as.character(failure_cases$index + 1)
print(failure_cases)
```

## Filter out Invalid Rows

```{r}
#| echo: true
# filter the data to only include valid rows
filtered_data <- invalid_data |> filter(!(rownames(invalid_data) %in% failed_rows))

print(filtered_data)
```


# Synthesize Test Data with Pandera

## Just call `Schema$example`

```{r}
#| echo: true
print(py$Schema$example(size = as.integer(5)))
```

## Useful for unit testing!

```{r}
#| echo: true
process_data <- function(data, in_stock) {
    py$Schema$validate(data, lazy=TRUE) |>
        mutate(in_stock=in_stock)
}

test_process_data <- function() {
    mock_data <- py$Schema$example(size = as.integer(5))
    output <- process_data(mock_data, TRUE)
    print(output)
}

test_process_data()
```

## Catch bugs early!

Let's create an invalid schema

```{python}
#| echo: true
class InvalidSchema(pa.DataFrameModel):
    item: Series[str]
    price: Series[float]
```

## Catch bugs early!

```{r}
#| echo: true

test_process_data_error <- function() {
    mock_data <- py$InvalidSchema$example(size = as.integer(1))
    tryCatch({
        process_data(mock_data, TRUE)
    }, error=function(err) {
        exception <<- attr(py_last_error(), "exception")
        return(NULL)
    })
    print(exception$failure_cases)
}

test_process_data_error()
```

# Takeaways

- Pandera lets you define schemas or "statistical types" for your dataframes
- You can use it in R with `reticulate`!
- Challenge: how can we break this?

# Thanks!

- Twitter: `@cosmicBboy`
- Slides: [https://github.com/unionai-oss/pandera-nyhackr-20230330](https://github.com/unionai-oss/pandera-nyhackr-20230330)
- Repo: [https://github.com/unionai-oss/pandera](https://github.com/unionai-oss/pandera)
- Discord: [https://discord.gg/vyanhWuaKB](https://discord.gg/vyanhWuaKB)
